Congratulations, you've started a Django project at BU!

There are a few things you should do by way of setup, if you haven't
done them already.

=================
VM ENVIRONMENT
=================

This project template contains a complete VM environment that can be used
for development.  This is facilitated using Oracle's VirtualBox and 'Vagrant'
(which is really just a set of wrappers around Virtualbox).

You can download Virtualbox and Vagrant here:

  http://vagrantup.com/docs/getting-started/

Then, cd into the 'vagrant' directory of this documentation and run:

    $ vagrant up

This will bootstrap the VM and install this project template into it.  It will
also create the virtualenv and install the requirements.

If you're developing locally, you can also create a virtualenv and install
the basic dependencies (pip, etc) yourself.

All command-line examples in this document assume you're working in your
virtualenv for this project (i.e. you've done ``$ WORKON [myproject]`` )


=================
DATABASE
=================

This document assumes you're using MySQL for your database, and that you've
requested and received accounts/databases on the appropriate server).  You
can specify these as necessary in the settings files (see below).


=================
PROJECT FOLDER
=================

Rename the project folder from 'myproject' to the project name.
Try to use a valid Python module identifier - so basically a-z and "_".


=================
APP NAME
=================

Similarly to the project name above, you'll want name your ***app*** something
unique and Python-friendly.  Your app is located in your project root.  So what
**is** an app and how is it different from a project?

Roughly speaking, an app is a cohesive unit of functionality, ideally reusable
across multiple projects.  In practice, this works to varying degrees, but
we ought to at least try to preserve the distinction.  The app that comes with
this guide is called ``my_app`` - be sure to change this!  Note that you'll
need to change this in two places - ``my_app`` and 
``my_app/templates/my_app`` (see ``TEMPLATE_DIRS`` below for a discussion
of template directory layout).


=================
REQUIREMENTS
=================

(Be sure you're in your virtualenv for this).  Install the default
requirements by running the following from the project root::

  (venv)$ pip install -r requirements.txt

As you add library code, you can add it to your requirements.txt file
to make sure it's installed during any new deployment.


=================
SETTINGS
=================

Project-wide defaults should go in settings.py - review this file and make
sure it makes sense for your specific case (there are a few settings we'll
want to highlight specifically).

Deployment-specific settings - such as databases, for example - should go in
settings_[env].py (e.g. settings_devl.py, settings_prod.py, etc.)  These should
ideally correspond to deployment environment names in your fabfile (the script
you use for deployment).

settings_local.py is a special case - it's evaluated at the end of settings.py
(if it exists).  There's a .gitignore file distributed with this project
bootstrap package that includes "settings_local.py" - the idea is that your
local settings should NOT go in source control, while environment-specific
settings SHOULD.  settings_local.py.sample shows a sample settings_local.py -
just rename it if needed.

Additionally, when modifying settings, be mindful of Python's sequence types -
basically, remember that tuples are immutable.  (In most, though not all, cases
Django is happy to let you use a list instead of a tuple for a setting).

-------------------------------
SETTINGS OF PARTICULAR NOTE
-------------------------------

In general, there are two kinds of settings (for our purposes at the moment):
the kind that you want to override per-project, and per-environment.  To use
a more specific set of examples, you'll generally want to define the
ROOT_URLCONF per project, but the database per-environment.  It's worthwhile
to examine the entire settings file when starting a new project, but these
are the settings you'll need to change almost every time:

-------------------------------
PER-PROJECT SETTINGS
-------------------------------

These are settings you'll likely want to change in your settings.py, making
them project-wide rather than per-environment.

***ADMINS*** - this defines who gets email (**if** you have email set up) when
there is a 500 error.  Should be set to () for most projects (default), since
error reporting should happen elsewhere.

***ROOT_URLCONF*** - this tells Django where to look for the URLconf for your
project; its default is 'myproject.urls', but since you've changed your project
name as instructed above in **PROJECT FOLDER** (right?), you'll want to update
this to reflect the new project name.

***TEMPLATE_CONTEXT_PROCESSORS*** - this tells Django which context processors
should be enabled.  Certain pluggable apps require you to add their context
processor to the list.  Note that ``django.core.context_processors.request``
is disabled by default.  The functionality that this context processor
provides is a ``request`` object in every template rendered with a
RequestContext.  This can be useful in some circumstances, but imposes some
potential performance and security considerations which need to be considered
on a case-by-case basis.  Uncomment it if you need it, leave it alone if you
don't.  For more information, see the section on Context Processors in:

  http://docs.djangoproject.com/en/1.3/ref/templates/api/


***SECRET_KEY*** - this is important (though less critical than one might imagine,
since it's just a random seed for hashes, and not an encryption key or
anything).  Conveniently, there's a command bundled with django-extensions
that lets you generate a new one from the command line::

  $ python manage.py generate_secret_key


EMAIL - Most projects probably don't need email, other than for error reporting
(which should be handled elsewhere).  If you do, you can plug the SMTP settings
here.

***NOTE***: this is an area to explore for a more robust solution (and a
number of good options exist!)


-------------------------------
PER-ENVIRONMENT SETTINGS
-------------------------------

These are settings that are per-environment - meaning that you'll generally
want to define them separately for DEVL/TEST/PROD and local development - so
you'll want to put them in your settings_[env].py files:

***DATABASES*** - database settings (DB, credentials, etc.)  Note that you can
define more complex database routers here, though you most likely won't
need to.

***TEMPLATE_DIRS*** - this defines where Django will look for templates as your
views ask for them.  If you follow convention, you shouldn't need to add
anything here - just create a templates/[app_name] folder within your 
application folder, then you can just use "app_name/my_template.html"
as the path to the template (Django automatically looks in an application's
templates/ directory, assuming that
'django.template.loaders.app_directories.Loader' is included in the
TEMPLATE_LOADERS tuple.

You'll notice that ``TEMPLATE_DIRS`` has one item in it by default, which at
runtime becomes the ``templates`` directory in the project.  This is where
project-specific templates live (for instance, templates for the 404/500
error pages).  When you need to override a pluggable app's default 
templates - for example, the Django admin - you can put the templates
that override the app's templates there (i.e. project/templates/admin/).


***SESSION_COOKIE_PATH*** - The path set on the session cookie. This should
either match the URL path of your project or be parent of that path.
Generally you'll want it to be relatively restrictive, to avoid leaking the
sessionid to other applications hosted at BU.  For more on sessions, see:
https://docs.djangoproject.com/en/1.3/topics/http/sessions/

Note that if you develop locally with runserver, you'll want to override
this in your settings_local.py (since runserver will usually need a cookie
path of '/', while an app deployed to a server should have a non-root cookie
path).


***STATIC_ROOT***
***STATIC_URL***
***STATICFILES_DIRS***

These settings define where you store the static content (images, CSS, JS)
for your project - the path on the server, and the URL that it's mapped to.
Conveniently, Django has some helpers for this.  The idea is that you put
your app-specific static files in ``my_app/static/``; then for development,
the staticfiles_urlpatterns() helper (enabled in the URLconf by default)
knows to look there.  For deployment, the ``collectstatic`` management command
is run as part of the deployment script, which collects all the static files
from the various installed apps and puts them in one happy home - which should
be configured to be served directly by Apache (rather than mod_wsgi).  By
default, ``collectstatic`` will look in the ``static`` directory for every
app (e.g. ``my_app/static/``).

See http://docs.djangoproject.com/en/dev/howto/static-files/ for more details.

***MEDIA_ROOT***
***MEDIA_URL***

This is the path on disk/URL of any user-uploaded content.  Many applications
won't have any.  Those that do should be considered on a case-by-case basis - 
in particular, those directories will need appropriate permissions set, and we
will need to consider whether they should be in AFS or some sort of other
shared storage.

***NOTE***: this definitely requires more thought/discussion.


=================
settings_local
=================

As noted above, you'll want to override some specific settings for local
development.  These can be anything, but in almost all cases you'll want
to override at least the following:

  * DEBUG
  * SERVE_STATIC
  * DATABASES
  * STATIC_ROOT
  * MEDIA_ROOT

For local development, you'll likely want to set DEBUG and SERVE_STATIC to
True, set DATABASES to point to your local or development database, and set
STATIC_ROOT and MEDIA_ROOT to point to your project's static content area
and user-uploaded files area, respectively (the latter should be outside
of or excluded from source control).


=================
DJANGO ADMIN
=================

If you want to use the built-in Django admin, follow the instructions
in the settings and URLconf to enable it.  Basically, you'll want to make
sure that:

  * ``django.contrib.admin`` is in your ``INSTALLED_APPS``
  * The URLconf is set up
  * Your app has an admin.py with model admin registrations as documented in:
    http://docs.djangoproject.com/en/dev/ref/contrib/admin/


=================
DJANGO AUTH
=================

Depending on the needs of the project, you will either use Django auth,
or Weblogin.  For the former, you can make use of the handy management
command ``createsuperuser`` (or just run ``syncdb`` for the first time).

For the latter (Weblogin), you'll need to decide whether you want it handled
by Apache or Django.  The Apache way is (currently) somewhat easier; there's
some Apache configuration involved that needs to happen at deployment time,
but at the end of the day Apache just sets REMOTE_USER, which is then used
by Django for authorization.  If you want to use this method, follow the
instructions here:
  
  http://docs.djangoproject.com/en/dev/howto/auth-remote-user/

The other way, which is to have Django actually use Weblogin as an auth
backend, is doable but needs further discussion.

Either way, it's possible to configure Django to use multiple auth backends,
which may be desirable in order to do local development with the "regular"
auth database and deploy to production using Weblogin.


==================================
SYNCDB/MIGRATE
==================================

Django's ORM provides a way to create and manage your database tables; South
is a tool used to manage schema and data migrations.  After you set up the
project, you'll want to run syncdb to have Django create the tables for
its auth (if enabled), sessions and other built-in apps:

  $ python manage.py syncdb

If you have your own models defined, ``syncdb`` will also create database
tables for those (though you'll probably want to manage those with South - 
see below).  You can run ``syncdb`` as many times as you want - it'll 
introspect the models and create any new tables you need (though it doesn't
deal with changes - that's what South is for).  In general, you'll tend to use
``syncdb`` for built-in apps that basically don't change (i.e. the sessions
framework), and South for your own apps or apps that come with migrations.
Note that the first time you run ``syncdb``, if you have ``django.contrib.auth``
in your ``INSTALLED_APPS``, it'll ask if you want to create a superuser.
Remember that you can always do that with the ``createsuperuser`` management
command:

  $ python manage.py createsuperuser

***South*** is a tool used to manage schema and data migrations.  Roughly
speaking, any operation you put in a SQL script, you'd put in South.  In most
(though not quite all) cases, it can introspect your models, figure out the
changes, and write the schema migration for you (you can read the migration 
files - it's a relatively straightforward DSL).

To get your app hooked into South (and therefore exempt from ``syncdb``),
just do this after you've created your models in ``models.py``:

  $ python manage.py schemamigration [my_app] --initial

That'll create the initial migration, which you then need to run as follows:

  $ python manage.py migrate

Beyond that, there's an excellent tutorial on South, which I won't bother
reproducing here:

  http://south.aeracode.org/docs/tutorial/index.html


==================================
Runserver
==================================

You shouldn't need to run Django's built-in dev server - the VM development
setup should forward port 8080 to the VM, so all you need to do to test
your app is:

  http://localhost:8080


==================================
Error Templates (404/500)
==================================

Once you're out of DEBUG mode (you *did* remember to set DEBUG = True in your
settings_local.py, right?), you'll want to stop using Django's default error
view, which leaks all kinds of security-sensitive information, and start using
its production views for 404 and 500 errors.  Those views, by default, look for
"400.html" and "500.html" templates in your project's root template directory.
This default project provides *basic* templates, which you should customize
as per the needs of each particular project.  If you need to customize the
error views themselves, take a look at:

http://docs.djangoproject.com/en/dev/topics/http/views/#customizing-error-views


==================================
Django Debug Toolbar
==================================

***TODO***


==================================
Fabric (Deployment)
==================================

Fabric is the standard deployment tool.  It takes parameters for the
environment you wish to deploy to (which may contain multiple hosts) and the
actions to take (typically 'deploy', 'setup', or other management actions).
The syntax is generally something like:

    $ fab <environment> <command>

At project initialization, you should set up your basic settings in the
fabfile.py.  You can bootstrap an initial environment (after Systems sets up
their end of things) with:

    (venv)$ fab devl setup

Deployment is:

    (venv)$ fab devl deploy

***TODO***

[There will be more documentation here as we build out this process.]

